export declare const isScrollBehaviorSupported: () => boolean;
export declare const original: {
    _elementScroll: {
        (options?: ScrollToOptions | undefined): void;
        (x: number, y: number): void;
    } | undefined;
    readonly elementScroll: {
        (options?: ScrollToOptions | undefined): void;
        (x: number, y: number): void;
    };
    _elementScrollIntoView: ((arg?: boolean | ScrollIntoViewOptions | undefined) => void) | undefined;
    readonly elementScrollIntoView: (arg?: boolean | ScrollIntoViewOptions | undefined) => void;
    _windowScroll: ({
        (options?: ScrollToOptions | undefined): void;
        (x: number, y: number): void;
    } & typeof scroll) | undefined;
    readonly windowScroll: {
        (options?: ScrollToOptions | undefined): void;
        (x: number, y: number): void;
    } & typeof scroll;
};
declare type Prototype = typeof HTMLElement.prototype | typeof SVGElement.prototype | typeof Element.prototype;
export declare const modifyPrototypes: (modification: (prototype: Prototype) => void) => void;
export interface IAnimationOptions {
    duration?: number;
    timingFunc?: (k: number) => number;
}
export interface IScrollToOptions extends ScrollToOptions, IAnimationOptions {
}
export interface IScrollIntoViewOptions extends ScrollIntoViewOptions, IAnimationOptions {
}
export interface IContext extends IAnimationOptions {
    timeStamp: number;
    startX: number;
    startY: number;
    targetX: number;
    targetY: number;
    rafId: number;
    method: (x: number, y: number) => void;
    callback: () => void;
}
export declare const now: () => number;
export declare const step: (context: IContext) => void;
export declare const nonFinite: (value: number) => number;
export declare const isObject: (value: unknown) => value is Record<string, unknown>;
export {};
//# sourceMappingURL=common.d.ts.map