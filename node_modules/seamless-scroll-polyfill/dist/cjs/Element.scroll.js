"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.elementScrollPolyfill = exports.elementScroll = void 0;
const common_js_1 = require("./common.js");
exports.elementScroll = (element, options) => {
    var _a, _b;
    const originalBoundFunc = common_js_1.original.elementScroll.bind(element);
    if (options.left === undefined && options.top === undefined) {
        return;
    }
    const startX = element.scrollLeft;
    const startY = element.scrollTop;
    const targetX = common_js_1.nonFinite((_a = options.left) !== null && _a !== void 0 ? _a : startX);
    const targetY = common_js_1.nonFinite((_b = options.top) !== null && _b !== void 0 ? _b : startY);
    if (options.behavior !== "smooth") {
        return originalBoundFunc(targetX, targetY);
    }
    const removeEventListener = () => {
        window.removeEventListener("wheel", cancelScroll);
        window.removeEventListener("touchmove", cancelScroll);
    };
    const context = {
        timeStamp: common_js_1.now(),
        duration: options.duration,
        startX,
        startY,
        targetX,
        targetY,
        rafId: 0,
        method: originalBoundFunc,
        timingFunc: options.timingFunc,
        callback: removeEventListener,
    };
    const cancelScroll = () => {
        cancelAnimationFrame(context.rafId);
        removeEventListener();
    };
    window.addEventListener("wheel", cancelScroll, {
        passive: true,
        once: true,
    });
    window.addEventListener("touchmove", cancelScroll, {
        passive: true,
        once: true,
    });
    common_js_1.step(context);
};
exports.elementScrollPolyfill = (animationOptions) => {
    if (common_js_1.isScrollBehaviorSupported()) {
        return;
    }
    const originalFunc = common_js_1.original.elementScroll;
    common_js_1.modifyPrototypes((prototype) => (prototype.scroll = function scroll() {
        if (arguments.length === 1) {
            const scrollOptions = arguments[0];
            if (!common_js_1.isObject(scrollOptions)) {
                throw new TypeError("Failed to execute 'scroll' on 'Element': parameter 1 ('options') is not an object.");
            }
            return exports.elementScroll(this, Object.assign(Object.assign({}, scrollOptions), animationOptions));
        }
        return originalFunc.apply(this, arguments);
    }));
};
//# sourceMappingURL=Element.scroll.js.map